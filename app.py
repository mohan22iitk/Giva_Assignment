# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ca2I9uWdR8u7ClLZWH38GDFQ5YLTypaW
"""

!pip install faiss-cpu

!pip install fastapi

!pip install uvicorn

import pandas as pd
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
from fastapi import FastAPI, Query
from pydantic import BaseModel
import uvicorn

#dataset of news articles
df = pd.read_csv("Articles.csv", encoding="ISO-8859-1")
documents = df["Article"].dropna().astype(str).tolist()

#hugging face for embeddings
model = SentenceTransformer("all-MiniLM-L6-v2")

# Converting documents into embeddings
document_embeddings = model.encode(documents, convert_to_tensor=False)

# FAISS Index (Default: L2 Distance)
dimension = len(document_embeddings[0])
index = faiss.IndexFlatL2(dimension)
index.add(np.array(document_embeddings))

# FastAPI app
app = FastAPI()

# Similarity options
SIMILARITY_METRICS = ["l2", "cosine", "dot"]

class QueryInput(BaseModel):
    q: str
    metric: str = "cosine"

@app.get("/")
def home():
    return {"message": "Welcome to the Document Similarity API!"}

@app.post("/api/search")
def search(request: QueryInput):
    """Search for similar documents with different similarity metrics"""
    query_embedding = model.encode([request.q])

    if request.metric == "cosine":
        faiss.normalize_L2(query_embedding)  # Normalize for cosine similarity
        faiss.normalize_L2(document_embeddings)

    elif request.metric == "dot":
        query_embedding = np.array(query_embedding, dtype=np.float32)
        index_dot = faiss.IndexFlatIP(dimension)
        index_dot.add(np.array(document_embeddings))
        _, indices = index_dot.search(query_embedding, 5)

    else:  # Default: L2
        _, indices = index.search(np.array(query_embedding), 5)

    results = [documents[i] for i in indices[0]]
    return {"query": request.q, "metric": request.metric, "results": results}

@app.post("/api/add_document")
def add_document(text: str):
    """Real-time indexing: Add a new document to the vector database"""
    documents.append(text)
    new_embedding = model.encode([text])
    index.add(np.array(new_embedding))
    return {"message": "Document added successfully!", "total_documents": len(documents)}

import nest_asyncio
import uvicorn

nest_asyncio.apply()

uvicorn.run(app, host="0.0.0.0", port=8000)

